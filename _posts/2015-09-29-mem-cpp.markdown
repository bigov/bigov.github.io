---
layout: post
categories: site content
date: 2015-09-29 02:15:39
title: Памятка С/С++
---
Несколько полезных правил, которых следует придерживаться при разработке программ на 
C/C++:
<ul class="fine">
<li>Советами нужно пользоваться там, где они применимы. Не существует замены здравому 
смыслу.</li>
<li>Не забывайте в конце своих функций добавлять "return выражение", потому что в противном 
случае функция обязательно выдаст "мусор".</li>
<li>Программа на Си - это много "маленьких функций" и процедур, а не мало больших.</li>
<li>Разбивайте сложные выражения на более простые.</li>
<li>Уменьшайте набор потенциальных зависимостей (в области видимости) до набора 
реальных.</li>
<li>Если в функции используются исключительно комментарии вида "// ...", то при необходимости 
большие фрагменты кода можно быстро отключить или вернуть при помощи "/* ... */". Но не 
следует забывать, что препроцессор Си не понимает комментарии вида "// ...".</li>
<li>Не полагайтесь на очередность вычисления элементов выражения, если не знаете точно.</li>
<li>Базовые типы (char, int, short, long, float, double) имеют разное максимальное значение на 
разных платформах - всегда проверяйте граничные значения на текущей платформе при помощи 
констант из файлов &lt;limits.h&gt; и &lt;float.h&gt;.</li>
<li>Старайтесь освобождать память в той-же функции, в которой ее выделяете.</li>
<li>Если у функции есть аргументы, опишите их, если их нет, используйте слово void. В коде 
функции перед тем, как использовать аргументы
<ol>
<li>Проверяйте, получены ли аргументы вообще;</li>
<li>Всегда проверяйте тип и диапазон;</li>
<li>Если что-то не так, то попытайтесь их привести к правильному виду и сообщите о 
случившимся;</li>
<li>если нет возможности скорректировать аргументы, то должно быть сгенерировано 
исключение.</li>
</ol></li>
<li>У внутренних имен в Си значимы только первые 31 символ. Для внешних имен функций и 
переменных гарантируется уникальность только в пределах первых 6 символов в любом 
регистре.</li>
<li>Макросы почти никогда не требуются в С++.</li>
<li>Пользуйтесь "const" или "enum" для определения констант.</li>
<li>Используйте "inline" для уменьшения накладных расходов на вызов функций.</li>
<li>Применяйте "templat" для для определения семейства функций.</li>
<li>Для предотвращения конфликтов имен есть "namespace".</li>
<li>Не объявляйте переменную, пока она не потребуется, чтобы тут-же ее инициализировать. 
Всегда инициализируйте начальным значением все объявленные переменные.</li>
<li>Не используйте "malloc" - оператор "new" делает то же самое лучше.</li>
<li>Вместо "realloc" используйте "vector".</li>
<li>Везде, где только возможно, пользуйтесь средствами стандартной библиотеки вместо возни с 
указателями и байтами.</li>
<li>В большинстве случаев приведение типа означает ошибку на этапе проектирования.</li>
<li>Применение стандартных библиотек классов С++ "string" и "vector" поможет упростить 
программирование и свести к минимуму необходимость использования традиционных для С 
массивов символов и строк.</li>
<li>В начале проектирования программы старайтесь представить ее в виде набора 
взаимодействующих понятий, реализованных в виде классов и объектов, а не в виде набора 
структур данных с функциями.</li>
<li>Старайтесь, чтобы структура программы отражала ваши идеи:<ol>
<li>Отдельные <em>понятия</em> оформляйте в виде классов.</li>
<li><em>Сущности</em> следует делать объектами классов</li>
<li>Если два класса имеют общий интерфейс, то его следует оформить в виде абстрактного 
класса.</li>
<li>Если в реализации нескольких классов есть нечто существенно общее, то это лучше 
реализовать в виде базового класса.</li>
<li>Если класс является контейнером объектов - сделайте из него шаблон.</li>
<li>Если функция реализует алгоритм для контейнера, оформите ее в виде шаблона функции, 
выполняющего алгоритм для семейства контейнеров.</li>
<li>Если набор классов, шаблонов, данных и т.п. логически связаны, то поместите их в одно 
пространство имен.</li>
</ol></li>
<li>Не создавайте в классе "поля типа" - пользуйтесь виртуальными функциями.</li>
</ul>


